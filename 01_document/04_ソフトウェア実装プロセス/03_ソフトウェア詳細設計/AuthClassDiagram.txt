@startuml
title Auth class diagram
skinparam classAttributeIconSize 0

' External Class / Interface
package java.io {
    interface Serializable
}

package java.lang {
    class Exception
}

package org.springframework.boot.web.support {
    class SpringBootServletInitializer
}

package org.springframework.security.core.userdetails {
    class "User" as springUser
}

package org.springframework.data.jpa.repository {
    class JpaRepository<User, String> {
        List<T> findAll()
        List<T> findAll(Sort sort)
        List<T> findAll(Iterable<ID> ids)
        <S extends T> List<S> save(Iterable<S> entities)
        void flush()
        <S extends T> S saveAndFlush(S entity)
        void deleteInBatch(Iterable<T> entities)
        void deleteAllInBatch()
        T getOne(ID id)
    }
}

package org.springframework.security.config.annotation.web.configuration{
    class WebSecurityConfigurerAdapter {
        # void configure(HttpSecurity http)
    }
}

package org.springframework.security.config.annotation.authentication.configurers {
    class GlobalAuthenticationConfigurerAdapter
}

package org.springframework.security.core.userdetails {
    interface UserDetailsService {
    
    }
}

' Identity management Class / Interface

package app {
    class Application {
        +static void main(String[] args)
    }
}

package app.aspect {
    class AspectLogger {
        - {static} Logger LOGGER
        - {static} String TARGET_CLASS
        + void logStart(final JoinPoint joinPoint) 
        + void logEnd(final JoinPoint joinPoint)
        + void logThrowing(final Exception ex)
        - void logMethod(final String executeName, final JoinPoint joinPoint)
        - void logException(final Exception ex)
    }
}

package app.config {
    class AspectConfiguration {
        
    }
    
    class SecurityConfig {
        # void configure(HttpSecurity http)
        - CsrfTokenRepository csrfTokenRepository()
        - Filter csrfHeaderFilter()
    }

    class AuthenticationConfiguration {
        - LoginUserDetailsService userDetailService
        ~ PasswordEncoder passwordEncoder()
        - void init(AuthenticationManagerBuilder auth)
    }
    
    class SwaggerConfig {
        + Docket api()
    }
}

package app.constant {
    class Constants {
    }
}

package app.controller {
    class LoginController {
        -AuthenticationService authService
        +{static} Logger LOGGER
        @RequestMapping(value="",method=RequestMethod.POST)
        +ResponseEntity<AuthResult> login(LoginInfo loginInfo, final HttpServletRequest request, final HttpServletResponse response)
        @RequestMapping(value = "card", method = RequestMethod.POST)
        +ResponseEntity<AuthResult> loginSmartCard(HttpServletRequest request, HttpServletResponse response)
    }

    class UserController {
        - UserRepository repository
        - AuthenticationService authService
        @RequestMapping(value="/users",method=RequestMethod.GET)
        +List<User> findAll()
    }
}

package app.entity {
    class Permission {
        -Integer id
        -String name
        -String alias
        setter()
        getter()
    }

    class Role {
        -Integer id
        -String name
        -String alias
        List<Permission> permissions
        getter()
        setter()
    }

    class User {
        -String userId
        -String encodedPassword
        -String name
        -List<Role> roleList
        +getter()
        +setter()
    }
}

package app.exception {
    class CardReadException {
        + constructor(String)
    }
}

package app.model {
    class AuthResult {
        -String userName
        -List<String> permissionList
        -List<String> rollList
        +getter()
        +setter()
        +constructor()
    }
    
    class CardReadModel {
        -id
        +getter()
        +setter()
    }
    
    class LoginInfo {
        -String userId
        -String password
        +Boolean validParam()
        - Boolean validBlank()
        - Boolean validTextLength()
        - Boolean validNumOrAlpha()
        +getter()
        +setter()
    }

    class LoginUserDetail{
        -String name
        -String password
        -List<String> permissionsList
        -Collection<GrantedAuthority> authorities
        +getter()
        +setter()
        +constructor(User)
    }


}

package app.repository {
    class UserRepository {

    }
}


package app.service {

    class AuthenticationService {
        -AuthenticationManager authMgr
        -{static}Logger logger
        +AuthResult login()
        -void setCsrfCookie(AuthResult authResult, HttpServletRequest request, HttpServletResponse response)
        +boolean isAdmin(HttpServletRequest)
    }
    
    class CardReadService {
        +{static}Logger LOGGER
        +CardReadModel getCardInfo()
        -Process callPythonScript() 
        -Boolean isIdm(final String stdOut)
        -String parseIdm(final String stdOut)
        
    }
    
    class LoginUserDetailsService {
        UserRepository repository
        +UserDetails loadUserByUsername(String userName)

    }

}
' Inhelitation/Implemention
SecurityConfig -up-|> WebSecurityConfigurerAdapter
AuthenticationConfiguration -up-* SecurityConfig
AuthenticationConfiguration -up-|> GlobalAuthenticationConfigurerAdapter
Serializable <|-- Permission
Serializable <|-- Role
Serializable <|-- User
User -- LoginUserDetail
JpaRepository <|-- UserRepository
springUser <|-- LoginUserDetail
SpringBootServletInitializer <|-- Application
UserDetailsService <|-- LoginUserDetailsService

' Relation
AuthResult -- AuthenticationService
CardReadModel -- CardReadService
LoginInfo -- AuthenticationService
LoginUserDetail -- AuthenticationService
LoginUserDetail -- LoginUserDetailsService
Role -- User

' Implemention
AuthenticationService --o UserController
AuthenticationService --o LoginController
LoginUserDetailsService --o AuthenticationConfiguration
UserRepository --o LoginUserDetailsService

'Exception
Exception <|-- CardReadException
CardReadService -- CardReadException
@enduml
